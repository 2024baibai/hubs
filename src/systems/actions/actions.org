* keywords and concepts
** path
A path is used as a key when writing or querying the state a user input frame. 
Paths happen to be a string for now.
We conceptually separate "action" paths, which are
used by app code to read user input from a frame,
from "device" paths, which specify where device state
is recorded. 

#+BEGIN_EXAMPLE js
paths.actions.rightHandGrab = "/actions/rightHandGrab";
paths.actions.rightHandDrop = "/actions/rightHandDrop";
paths.actions.rightHandStartDrawing = "/actions/rightHandStartDrawing";
paths.actions.rightHandStopDrawing = "/actions/rightHandStopDrawing";
#+END_EXAMPLE 

#+BEGIN_EXAMPLE js
paths.device.mouse.coords = "/device/mouse/coords";
paths.device.mouse.movementXY = "/device/mouse/movementXY";
paths.device.mouse.buttonLeft = "/device/mouse/buttonLeft";
paths.device.mouse.buttonRight = "/device/mouse/buttonRight";
paths.device.keyboard = {
  key: key => {
    return `/device/keyboard/${key.toLowerCase()}`;
  }
};
#+END_EXAMPLE 

** action
A path used by app code when reading a user input frame.
#+BEGIN_EXAMPLE js
const userinput = AFRAME.scenes[0].systems.userinput;
const grab = userinput.readFromFrame(paths.actions.rightHandGrab);
if (grab) {
  this.startInteraction();
}
#+END_EXAMPLE 
The value in the frame can be of any type. We suggest you keep it simple.
#+BEGIN_EXAMPLE js
const userinput = AFRAME.scenes[0].systems.userinput;
const acceleration = userinput.readFromFrame(paths.actions.characterAcceleration);
this.updateVelocity( this.velocity, acceleration || zero );
this.move( this.velocity );
#+END_EXAMPLE 
** inputframe
A key-value store created each time the userinput system ticks.
The userinput system processes input from devices according to the current set of active bindings.
** device
*** devices.keyboard
A device which stores boolean values for each key. Browser events 
are collected into a queue to be processed in sequence once a frame.
*** devices.smartMouse
A "smart" device which stores values taken from mouse events. The device
is "smart" because it required some access to "app code", not just the 
browser apis. Namely, it requires access to cursor controller state and 
the in game camera to provide a pose value at 
frame[paths.devices.smartMouse.cursorPose]
and a vec2 value at 
frame[paths.devices.smartMouse.cameraDelta]
*** devices.smartTouchscreen
Similar to devices.smart.mouse, but more complicated due to having to 
handle multiple touches.
*** devices.oculusGoController
A device with a limited input capabilities. A good case-study for working 
with binding definitions with priority conflicts.
*** devices.viveController
A device with "plenty" of capabilities, many which often feel underutilized.
** binding
A binding is an association of the form:
#+BEGIN_EXAMPLE js
    {
      src: { xform_key : path,
             xform_key : path },
      dest: { xform_key : path,
              xform_key : path },
      xform: some_pure_function,
      root: key_to_resolve_binding_conflicts,
      priority: numerical_priority_of_this_binding // higher priority overrides lower priority bindings
    },
#+END_EXAMPLE 

that specifying an `xform` (transformation) function that takes the values in the 
frame at the paths provided by `src` to the values in the frame at the paths in `dest`.
These ought to be treated as user-customizable, although we are likely the only ones to 
do this customization for some time. 
Bindings are organized into sets, and written with active specific device combinations in mind.

** set
Sets are app state that determine the current capabilities of the user. 
#+BEGIN_EXAMPLE js
  sets.rightHandTeleporting = "rightHandTeleporting";
  sets.rightHandHoveringOnPen = "rightHandHoveringOnPen";
  sets.rightHandHoveringOnInteractable = "rightHandHoveringOnInteractable";
  sets.rightHandHoveringOnNothing = "rightHandHoveringOnNothing";
  sets.rightHandHoldingPen = "rightHandHoldingPen";
  sets.rightHandHoldingInteractable = "rightHandHoldingInteractable";
#+END_EXAMPLE 
For example, we associate grab buttons on right-handed controllers (when 
connected) to grab actions via bindings that will be active when the 
"right hand is hovering on an interactable" set is active. 
** xform
A function that takes `src` paths to read from the frame as input,
and the `dest` paths to write as output.
** priority and root
When bindings can be written such that multiple actions can be triggered by the same
user gesture, we express a desire to prefer enacting one action or another thru the 
notions of binding "root"s and "priority"s. When active bindings share the same root,
the userinput system only runs active bindings with highest priority values. This is 
how we can handle context-sensitive interaction mechanics on devices with limited input,
like the oculus go remote.

   

